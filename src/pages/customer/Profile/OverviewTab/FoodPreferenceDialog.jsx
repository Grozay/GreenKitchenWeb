import { useState } from 'react'
import Box from '@mui/material/Box'
import Typography from '@mui/material/Typography'
import Button from '@mui/material/Button'
import Chip from '@mui/material/Chip'
import Grid from '@mui/material/Grid'
import FormControl from '@mui/material/FormControl'
import FormLabel from '@mui/material/FormLabel'
import FormGroup from '@mui/material/FormGroup'
import FormControlLabel from '@mui/material/FormControlLabel'
import Checkbox from '@mui/material/Checkbox'
import TextField from '@mui/material/TextField'
import Radio from '@mui/material/Radio'
import RadioGroup from '@mui/material/RadioGroup'
import Alert from '@mui/material/Alert'
import CircularProgress from '@mui/material/CircularProgress'
import Divider from '@mui/material/Divider'
import Dialog from '@mui/material/Dialog'
import DialogTitle from '@mui/material/DialogTitle'
import DialogContent from '@mui/material/DialogContent'
import DialogActions from '@mui/material/DialogActions'
import { toast } from 'react-toastify'
import { createOrUpdateCustomerReferenceAPI } from '~/apis'

export default function FoodPreferenceDialog({
  open,
  onClose,
  onCancel,
  customerDetails,
  setCustomerDetails
}) {
  const [loading, setLoading] = useState(false)
  const [formData, setFormData] = useState({
    vegetarianType: '',
    canEatEggs: false,
    canEatDairy: false,
    note: '',
    favoriteProteins: [],
    favoriteCarbs: [],
    favoriteVegetables: [],
    allergies: [],
    customProtein: '',
    customCarb: '',
    customVegetable: '',
    customAllergy: ''
  })

  // Options for food preferences
  const proteinOptions = [
    'Th·ªãt b√≤', 'Th·ªãt g√†', 'Th·ªãt heo', 'C√° h·ªìi', 'C√° thu', 'T√¥m', 'Cua', 'M·ª±c',
    'ƒê·∫≠u ph·ª•', 'Tempeh', 'ƒê·∫≠u ƒëen', 'ƒê·∫≠u xanh', 'Tr·ª©ng g√†', 'Tr·ª©ng v·ªãt'
  ]

  const carbOptions = [
    'C∆°m tr·∫Øng', 'C∆°m g·∫°o l·ª©c', 'C∆°m t√≠m', 'Khoai lang', 'Khoai t√¢y', 'B√≠ ƒë·ªè',
    'B√∫n', 'Ph·ªü', 'M√¨ √Ω', 'Y·∫øn m·∫°ch', 'Quinoa', 'B√°nh m√¨ nguy√™n c√°m'
  ]

  const vegetableOptions = [
    'Salad xanh', 'C√† r√≥t', 'B√¥ng c·∫£i xanh', 'B√¥ng c·∫£i tr·∫Øng', 'Rau mu·ªëng',
    'Rau c·∫£i', 'C√† chua', 'D∆∞a chu·ªôt', '·ªöt chu√¥ng', 'N·∫•m', 'Gi√° ƒë·ªó', 'C·∫ßn t√¢y'
  ]

  const allergyOptions = [
    'ƒê·∫≠u ph·ªông', 'H·∫°t ƒëi·ªÅu', 'T√¥m cua', 'S·ªØa', 'Tr·ª©ng', 'Gluten',
    'ƒê·∫≠u n√†nh', 'H·∫°t m√®', 'C√°', 'Shellfish'
  ]

  const vegetarianTypes = [
    { value: 'NEVER', label: 'ƒÇn m·∫∑n' },
    { value: 'VEGAN', label: 'ƒÇn thu·∫ßn chay' },
    { value: 'LUNAR_VEGAN', label: 'ƒÇn chay 2 ng√†y r·∫±m m·ªói th√°ng' }
  ]

  // Handle checkbox changes
  const handleCheckboxChange = (category, value) => {
    setFormData(prev => ({
      ...prev,
      [category]: prev[category].includes(value)
        ? prev[category].filter(item => item !== value)
        : [...prev[category], value]
    }))
  }

  // Handle custom input changes
  const handleCustomInputChange = (category, value) => {
    setFormData(prev => ({
      ...prev,
      [category]: value
    }))
  }

  // Add custom item to list
  const addCustomItem = (category, customField) => {
    const customValue = formData[customField].trim()
    if (customValue && !formData[category].includes(customValue)) {
      setFormData(prev => ({
        ...prev,
        [category]: [...prev[category], customValue],
        [customField]: ''
      }))
    }
  }

  // Remove item from list
  const removeItem = (category, value) => {
    setFormData(prev => ({
      ...prev,
      [category]: prev[category].filter(item => item !== value)
    }))
  }

  // Handle form submission
  const handleSubmit = async () => {
    setLoading(true)
    try {
      // Prepare data for API
      const referenceData = {
        customer: {
          id: customerDetails.id
        },
        vegetarianType: formData.vegetarianType || 'NEVER',
        canEatEggs: formData.canEatEggs,
        canEatDairy: formData.canEatDairy,
        note: formData.note,
        favoriteProteins: formData.favoriteProteins.map(name => ({ proteinName: name })),
        favoriteCarbs: formData.favoriteCarbs.map(name => ({ carbName: name })),
        favoriteVegetables: formData.favoriteVegetables.map(name => ({ vegetableName: name })),
        allergies: formData.allergies.map(name => ({ allergyName: name }))
      }

      const createdReference = await createOrUpdateCustomerReferenceAPI(referenceData)

      // Update customer details with new reference
      setCustomerDetails(prev => ({
        ...prev,
        customerReference: createdReference
      }))

      onClose()
      toast.success('ƒê√£ l∆∞u th√¥ng tin s·ªü th√≠ch th√†nh c√¥ng!')
    } catch {
      toast.error('C√≥ l·ªói x·∫£y ra khi l∆∞u th√¥ng tin!')
    } finally {
      setLoading(false)
    }
  }

  return (
    <Dialog
      open={open}
      onClose={onCancel}
      maxWidth="md"
      fullWidth
      scroll="paper"
    >
      <DialogTitle sx={{ textAlign: 'center', pb: 1 }}>
        <Typography variant="h5" sx={{ fontWeight: 'bold' }}>
          üåü Thi·∫øt l·∫≠p s·ªü th√≠ch ·∫©m th·ª±c
        </Typography>
        <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
          Chia s·∫ª v·ªõi ch√∫ng t√¥i v·ªÅ s·ªü th√≠ch ·∫©m th·ª±c ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t ph√π h·ª£p nh·∫•t
        </Typography>
      </DialogTitle>

      <DialogContent sx={{ pt: 2 }}>
        <Grid container spacing={4}>
          {/* Vegetarian Type */}
          <Grid size={12}>
            <FormControl component="fieldset">
              <FormLabel component="legend" sx={{ fontWeight: 'bold', mb: 1 }}>
                ü•ó Ch·∫ø ƒë·ªô ƒÉn c·ªßa b·∫°n
              </FormLabel>
              <RadioGroup
                value={formData.vegetarianType}
                onChange={(e) => {
                  const newValue = e.target.value
                  setFormData(prev => ({
                    ...prev,
                    vegetarianType: newValue,
                    // Reset eggs and dairy to false if choosing "ƒÇn m·∫∑n"
                    canEatEggs: newValue === 'NEVER' ? false : prev.canEatEggs,
                    canEatDairy: newValue === 'NEVER' ? false : prev.canEatDairy
                  }))
                }}
              >
                {vegetarianTypes.map((type) => (
                  <FormControlLabel
                    key={type.value}
                    value={type.value}
                    control={<Radio />}
                    label={type.label}
                  />
                ))}
              </RadioGroup>
            </FormControl>
          </Grid>

          {/* Eggs and Dairy */}
          {formData.vegetarianType && formData.vegetarianType !== 'NEVER' && (
            <Grid size={12}>
              <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                üí° <strong>L∆∞u √Ω:</strong> M·ªôt s·ªë m√≥n chay c√≥ th·ªÉ ch·ª©a tr·ª©ng ho·∫∑c s·ªØa. H√£y cho ch√∫ng t√¥i bi·∫øt b·∫°n c√≥ th·ªÉ ƒÉn nh·ªØng th·ª±c ph·∫©m n√†y kh√¥ng ƒë·ªÉ ch√∫ng t√¥i ƒë·ªÅ xu·∫•t m√≥n ƒÉn ph√π h·ª£p.
              </Typography>
              <FormGroup>
                <FormControlLabel
                  control={
                    <Checkbox
                      checked={formData.canEatEggs}
                      onChange={(e) => setFormData(prev => ({ ...prev, canEatEggs: e.target.checked }))}
                    />
                  }
                  label="ü•ö T√¥i c√≥ th·ªÉ ƒÉn tr·ª©ng"
                />
                <FormControlLabel
                  control={
                    <Checkbox
                      checked={formData.canEatDairy}
                      onChange={(e) => setFormData(prev => ({ ...prev, canEatDairy: e.target.checked }))}
                    />
                  }
                  label="ü•õ T√¥i c√≥ th·ªÉ ƒÉn s·ªØa v√† ch·∫ø ph·∫©m t·ª´ s·ªØa"
                />
              </FormGroup>
            </Grid>
          )}

          {/* Note */}
          <Grid size={12}>
            <TextField
              fullWidth
              label="Ghi ch√∫ th√™m"
              multiline
              rows={3}
              value={formData.note}
              onChange={(e) => setFormData(prev => ({ ...prev, note: e.target.value }))}
              placeholder="V√≠ d·ª•: Kh√¥ng ƒÉn cay, th√≠ch m√≥n nh·∫°t..."
            />
          </Grid>

          {/* Favorite Proteins */}
          <Grid size={12}>
            <Typography variant="h6" gutterBottom sx={{ fontWeight: 'bold' }}>
              ü•© Protein y√™u th√≠ch
            </Typography>
            <FormGroup sx={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap' }}>
              {proteinOptions.map((protein) => (
                <FormControlLabel
                  key={protein}
                  control={
                    <Checkbox
                      checked={formData.favoriteProteins.includes(protein)}
                      onChange={() => handleCheckboxChange('favoriteProteins', protein)}
                    />
                  }
                  label={protein}
                  sx={{ minWidth: '200px' }}
                />
              ))}
            </FormGroup>
            <Box sx={{ mt: 2, display: 'flex', gap: 1, alignItems: 'center' }}>
              <TextField
                size="small"
                label="Protein kh√°c"
                value={formData.customProtein}
                onChange={(e) => handleCustomInputChange('customProtein', e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && addCustomItem('favoriteProteins', 'customProtein')}
              />
              <Button
                variant="outlined"
                onClick={() => addCustomItem('favoriteProteins', 'customProtein')}
              >
                Th√™m
              </Button>
            </Box>
            {formData.favoriteProteins.length > 0 && (
              <Box sx={{ mt: 2, display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                {formData.favoriteProteins.map((protein, index) => (
                  <Chip
                    key={index}
                    label={protein}
                    onDelete={() => removeItem('favoriteProteins', protein)}
                    color="secondary"
                  />
                ))}
              </Box>
            )}
          </Grid>

          <Divider />

          {/* Favorite Carbs */}
          <Grid size={12}>
            <Typography variant="h6" gutterBottom sx={{ fontWeight: 'bold' }}>
              üçö Carbs y√™u th√≠ch
            </Typography>
            <FormGroup sx={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap' }}>
              {carbOptions.map((carb) => (
                <FormControlLabel
                  key={carb}
                  control={
                    <Checkbox
                      checked={formData.favoriteCarbs.includes(carb)}
                      onChange={() => handleCheckboxChange('favoriteCarbs', carb)}
                    />
                  }
                  label={carb}
                  sx={{ minWidth: '200px' }}
                />
              ))}
            </FormGroup>
            <Box sx={{ mt: 2, display: 'flex', gap: 1, alignItems: 'center' }}>
              <TextField
                size="small"
                label="Carb kh√°c"
                value={formData.customCarb}
                onChange={(e) => handleCustomInputChange('customCarb', e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && addCustomItem('favoriteCarbs', 'customCarb')}
              />
              <Button
                variant="outlined"
                onClick={() => addCustomItem('favoriteCarbs', 'customCarb')}
              >
                Th√™m
              </Button>
            </Box>
            {formData.favoriteCarbs.length > 0 && (
              <Box sx={{ mt: 2, display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                {formData.favoriteCarbs.map((carb, index) => (
                  <Chip
                    key={index}
                    label={carb}
                    onDelete={() => removeItem('favoriteCarbs', carb)}
                    color="info"
                  />
                ))}
              </Box>
            )}
          </Grid>

          <Divider />

          {/* Favorite Vegetables */}
          <Grid size={12}>
            <Typography variant="h6" gutterBottom sx={{ fontWeight: 'bold' }}>
              ü•¨ Rau c·ªß y√™u th√≠ch
            </Typography>
            <FormGroup sx={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap' }}>
              {vegetableOptions.map((vegetable) => (
                <FormControlLabel
                  key={vegetable}
                  control={
                    <Checkbox
                      checked={formData.favoriteVegetables.includes(vegetable)}
                      onChange={() => handleCheckboxChange('favoriteVegetables', vegetable)}
                    />
                  }
                  label={vegetable}
                  sx={{ minWidth: '200px' }}
                />
              ))}
            </FormGroup>
            <Box sx={{ mt: 2, display: 'flex', gap: 1, alignItems: 'center' }}>
              <TextField
                size="small"
                label="Rau c·ªß kh√°c"
                value={formData.customVegetable}
                onChange={(e) => handleCustomInputChange('customVegetable', e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && addCustomItem('favoriteVegetables', 'customVegetable')}
              />
              <Button
                variant="outlined"
                onClick={() => addCustomItem('favoriteVegetables', 'customVegetable')}
              >
                Th√™m
              </Button>
            </Box>
            {formData.favoriteVegetables.length > 0 && (
              <Box sx={{ mt: 2, display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                {formData.favoriteVegetables.map((vegetable, index) => (
                  <Chip
                    key={index}
                    label={vegetable}
                    onDelete={() => removeItem('favoriteVegetables', vegetable)}
                    color="success"
                  />
                ))}
              </Box>
            )}
          </Grid>

          <Divider />

          {/* Allergies */}
          <Grid size={12}>
            <Typography variant="h6" gutterBottom sx={{ fontWeight: 'bold', color: 'error.main' }}>
              ‚ö†Ô∏è D·ªã ·ª©ng th·ª±c ph·∫©m
            </Typography>
            <Alert severity="info" sx={{ mb: 2 }}>
              Vui l√≤ng ch·ªçn c√°c th·ª±c ph·∫©m m√† b·∫°n b·ªã d·ªã ·ª©ng ƒë·ªÉ ch√∫ng t√¥i c√≥ th·ªÉ ƒë·ªÅ xu·∫•t m√≥n ƒÉn ph√π h·ª£p.
            </Alert>
            <FormGroup sx={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap' }}>
              {allergyOptions.map((allergy) => (
                <FormControlLabel
                  key={allergy}
                  control={
                    <Checkbox
                      checked={formData.allergies.includes(allergy)}
                      onChange={() => handleCheckboxChange('allergies', allergy)}
                    />
                  }
                  label={allergy}
                  sx={{ minWidth: '200px' }}
                />
              ))}
            </FormGroup>
            <Box sx={{ mt: 2, display: 'flex', gap: 1, alignItems: 'center' }}>
              <TextField
                size="small"
                label="D·ªã ·ª©ng kh√°c"
                value={formData.customAllergy}
                onChange={(e) => handleCustomInputChange('customAllergy', e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && addCustomItem('allergies', 'customAllergy')}
              />
              <Button
                variant="outlined"
                onClick={() => addCustomItem('allergies', 'customAllergy')}
              >
                Th√™m
              </Button>
            </Box>
            {formData.allergies.length > 0 && (
              <Box sx={{ mt: 2, display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                {formData.allergies.map((allergy, index) => (
                  <Chip
                    key={index}
                    label={allergy}
                    onDelete={() => removeItem('allergies', allergy)}
                    color="error"
                  />
                ))}
              </Box>
            )}
          </Grid>

          {/* Submit Button */}
          <Grid size={12}>
            <Box sx={{ textAlign: 'center', mt: 3 }}>
              <Button
                variant="contained"
                size="large"
                onClick={handleSubmit}
                disabled={loading}
                sx={{
                  px: 4,
                  py: 1.5,
                  fontSize: '1.1rem',
                  background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                  '&:hover': {
                    background: 'linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%)'
                  }
                }}
              >
                {loading ? (
                  <>
                    <CircularProgress size={20} color="inherit" sx={{ mr: 1 }} />
                    ƒêang l∆∞u...
                  </>
                ) : (
                  'üíæ L∆∞u th√¥ng tin s·ªü th√≠ch'
                )}
              </Button>
            </Box>
          </Grid>
        </Grid>
      </DialogContent>
      <DialogActions sx={{ p: 3 }}>
        <Button onClick={onCancel} color="secondary">
          H·ªßy
        </Button>
      </DialogActions>
    </Dialog>
  )
}
